
AT_Transmittion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000084  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000502  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000497  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fe  00000000  00000000  00000b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000636f  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000072ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000023c7  00000000  00000000  000072c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	24 d0       	rcall	.+72     	; 0x7c <main>
  34:	25 c0       	rjmp	.+74     	; 0x80 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <initialize_defolt>:
{
	// Declare your local variables here

	// Crystal Oscillator division factor: 1
	//#pragma optsize-
	CLKPR=(1<<CLKPCE);
  38:	80 e8       	ldi	r24, 0x80	; 128
  3a:	86 bd       	out	0x26, r24	; 38
	CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
  3c:	16 bc       	out	0x26, r1	; 38
	//#endif

	// Input/Output Ports initialization
	// Port A initialization
	// Function: Bit2=In Bit1=In Bit0=In
	DDRA=(0<<DDA2) | (0<<DDA1) | (0<<DDA0);
  3e:	1a ba       	out	0x1a, r1	; 26
	// State: Bit2=T Bit1=T Bit0=T
	PORTA=(0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
  40:	1b ba       	out	0x1b, r1	; 27

	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
  42:	17 ba       	out	0x17, r1	; 23
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (1<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
  44:	9f e2       	ldi	r25, 0x2F	; 47
  46:	98 bb       	out	0x18, r25	; 24

	// Port D initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
  48:	90 e4       	ldi	r25, 0x40	; 64
  4a:	91 bb       	out	0x11, r25	; 17
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTD=(0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
  4c:	12 ba       	out	0x12, r1	; 18
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=0xFF
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
  4e:	10 be       	out	0x30, r1	; 48
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
  50:	13 be       	out	0x33, r1	; 51
	TCNT0=0x00;
  52:	12 be       	out	0x32, r1	; 50
	OCR0A=0x00;
  54:	16 be       	out	0x36, r1	; 54
	OCR0B=0x00;
  56:	1c be       	out	0x3c, r1	; 60
	// Input Capture on Falling Edge
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
  58:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
  5a:	1e bc       	out	0x2e, r1	; 46
	TCNT1H=0x00;
  5c:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  5e:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
  60:	15 bc       	out	0x25, r1	; 37
	ICR1L=0x00;
  62:	14 bc       	out	0x24, r1	; 36
	OCR1AH=0x00;
  64:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
  66:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
  68:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
  6a:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=(0<<TOIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<ICIE1) | (0<<OCIE0B) | (0<<TOIE0) | (0<<OCIE0A);
  6c:	19 be       	out	0x39, r1	; 57
	// INT0: Off
	// INT1: Off
	// Interrupt on any change on pins PCINT0-7: Off
	// Interrupt on any change on pins PCINT8-10: Off
	// Interrupt on any change on pins PCINT11-17: Off
	MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
  6e:	15 be       	out	0x35, r1	; 53
	GIMSK=(0<<INT1) | (0<<INT0) | (0<<PCIE0) | (0<<PCIE2) | (0<<PCIE1);
  70:	1b be       	out	0x3b, r1	; 59

	// USI initialization
	// Mode: Disabled
	// Clock source: Register & Counter=no clk.
	// USI Counter Overflow Interrupt: Off
	USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
  72:	1d b8       	out	0x0d, r1	; 13

	// USART initialization
	// USART disabled
	UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
  74:	1a b8       	out	0x0a, r1	; 10
	// Analog Comparator: Off
	// The Analog Comparator's positive input is
	// connected to the AIN0 pin
	// The Analog Comparator's negative input is
	// connected to the AIN1 pin
	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
  76:	88 b9       	out	0x08, r24	; 8
	// Digital input buffer on AIN0: On
	// Digital input buffer on AIN1: On
	DIDR=(0<<AIN0D) | (0<<AIN1D);
  78:	11 b8       	out	0x01, r1	; 1
  7a:	08 95       	ret

0000007c <main>:


int main(void)
{

	initialize_defolt();
  7c:	dd df       	rcall	.-70     	; 0x38 <initialize_defolt>
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x2>

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>
