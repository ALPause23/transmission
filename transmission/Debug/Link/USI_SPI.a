;/*
; * USI_SPI.c
; *
; * Created: 11.10.2022 14:54:42
; *  Author: Evgeni
; */
;#include <USI_SPI.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <common.h>
;
;typedef enum
;{
;	LSB,
;	MSB,
;	CPOL_0,
;	CPOL_1,
;
;}SPI_USI_Typedef;
;
;uint8_t *CS_Port = &PORTD;
;uint8_t CS_Pin = PORTD6;
;
;void SPI_CS_Up(void)
; 0003 0017 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0003 0018 	*CS_Port |= (1<<CS_Pin);
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 0019 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;void SPI_CS_Down(void)
; 0003 001C {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 001D 	*CS_Port &= ~(1<<CS_Pin);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0003 001E }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void SPI_Init(void)
; 0003 0021 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0003 0022 	DDRB|=((1<<PORTB6)|(1<<PORTB7));//Ножки USI на выход
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 0023 
; 0003 0024 	PORTB&=~((1<<PORTB6)|(1<<PORTB7));//Ножки USI в низкий уровень
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0003 0025 	DDRD |= (1<<PORTD6);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0003 0026 	PORTD |= GPIO_Pin_6;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0027 	USICR |= (1<<USIWM0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 0028 }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void SPI_SendByte(uint8_t byte)
; 0003 002B {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0003 002C 	USIDR = byte; //данные в регистр
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;	byte -> R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0003 002D 	USISR |= (1<<USIOIF);//установим флаг начала передачи
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0003 002E 	//SPI_CS_Down();
; 0003 002F 	while(!(USISR & (1<<USIOIF)))
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0030 
; 0003 0031 	{
; 0003 0032 		USICR |= ((1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC));//постепенно передаем байт
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0003 0033 		//delay_us(10);
; 0003 0034 	}
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0003 0035 	//SPI_CS_Up();
; 0003 0036 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;uint8_t SPI_ReadByte(uint8_t data)
; 0003 0039 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0003 003A 	//uint8_t report;
; 0003 003B 	//SPI_PORTX &= ~(1<<SPI_SS);
; 0003 003C 	//SPDR = data;
; 0003 003D 	//while(!(SPSR & (1<<SPIF)));
; 0003 003E 	//report = SPDR;
; 0003 003F 	//SPI_PORTX |= (1<<SPI_SS);
; 0003 0040 	return 0; //report
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;	data -> R17
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0003 0041 }
;PCODE: $00000050 VOL: 0
