;#include <MAX7219.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0

	.DSEG
;#include <delay.h>
;//#include <symbols.h>
;#include <mem.h>
;
;
;#if defined __ATTINY2313A__ || defined __ATTINY2313__
;#include <USI_SPI.h>
;#else
;#include <SPI.h>
;#endif
;
;void SendLed(uint8_t adr, uint8_t data);
;void SetIntensity(uint8_t a);
;
;
;
;#define NO_OP				0x0000
;#define NO_DECODE_MODE		0x0900
;#define INTENSITY			0x0A00  // (ot 0 do F)
;#define SCAN_LIMIT			0x0B00	// (ot 0 do 7)
;#define SHUTDOWN			0x0C00	// (0 - shotdown, 1 - no shotdown)
;#define DISPLAY_TEST		0x0F00	// (1 - test)
;
;#define CS					PortB4
;#define MOSI				PortB5
;#define SCK					PortB7
;
;
;void InitLed(void)
; 0002 001F {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0002 0020 	SendLed((DISPLAY_TEST >> 8), (DISPLAY_TEST | 0x00));
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0002 0021 	SendLed((INTENSITY >> 8), (INTENSITY | 0x0f));
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 0022 	SendLed((SCAN_LIMIT >> 8), (SCAN_LIMIT | 0x07));
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 0023 	SendLed((NO_DECODE_MODE >> 8), (NO_DECODE_MODE | 0x00));
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 0024 	SendLed((SHUTDOWN >> 8), (SHUTDOWN | 0x01));
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 0025 	SetIntensity(0x0F);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0002 0026 	WriteNum(SYMBOL_EMTY);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 0027 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void SendLed(uint8_t adr, uint8_t data)
; 0002 002A {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0002 002B 	SPI_CS_Down();
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;	adr -> R16
;	data -> R17
;PCODE: $0000002C VOL: 0
; 0002 002C 
; 0002 002D 	SPI_SendByte(adr);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 002E 	SPI_SendByte(data);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0002 002F 
; 0002 0030 	SPI_CS_Up();
;PCODE: $00000031 VOL: 0
; 0002 0031 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;
;void SetIntensity(uint8_t a)  // 0 down to 15
; 0002 0035 {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 0036 	SendLed((INTENSITY >> 8), (SHUTDOWN | a));
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;	a -> R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0002 0037 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;void WriteNum(Matrix_Symbols num)
; 0002 003A {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 003B 	uint8_t* s_ptr = NULL;
; 0002 003C 	int i;
; 0002 003D 
; 0002 003E 	s_ptr = GetSymbols(num);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;	num -> R16
;	*s_ptr -> R17
;	i -> R18,R19
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0002 003F 
; 0002 0040 	for(i = 0; i < 8; i++)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0041 	{
; 0002 0042 		SendLed((i + 1), s_ptr[i]);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 0043 	}
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 0044 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;void WriteSymbol(uint8_t* num)
; 0002 0047 {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0048 	int i;
; 0002 0049 
; 0002 004A 	for(i = 0; i < 8; i++)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;	*num -> R19
;	i -> R16,R17
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0002 004B 	{
; 0002 004C 		SendLed((i + 1), num[i]);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0002 004D 	}
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0002 004E }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;
;
;uint8_t *GetSymbols(Matrix_Symbols i)
; 0002 0052 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 0053 	//return symbols_ptr[i];
; 0002 0054 	switch (i)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;	i -> R17
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0002 0055 	{
; 0002 0056 		case SYMBOL_R:
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0002 0057 		{
; 0002 0058 			return Symbol_R;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0002 0059 		}
; 0002 005A 		case SYMBOL_ONE:
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0002 005B 		{
; 0002 005C 			return Symbol_ONE;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0002 005D 		}
; 0002 005E 		case SYMBOL_TWO:
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0002 005F 		{
; 0002 0060 			return Symbol_TWO;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 0061 		}
; 0002 0062 		case SYMBOL_THREE:
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0002 0063 		{
; 0002 0064 			return Symbol_THREE;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 0065 		}
; 0002 0066 		case SYMBOL_FOUR:
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0002 0067 		{
; 0002 0068 			return Symbol_FOUR;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0002 0069 		}
; 0002 006A 		case SYMBOL_FIVE:
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 006B 		{
; 0002 006C 			return Symbol_FIVE;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0002 006D 		}
; 0002 006E 		case SYMBOL_N:
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0002 006F 		{
; 0002 0070 			return Symbol_N;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0002 0071 		}
; 0002 0072 		default: return Symbol_EMPTY;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 0073 	}
;PCODE: $000000B5 VOL: 0
; 0002 0074 
; 0002 0075 	return 0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0002 0076 }
;PCODE: $000000B9 VOL: 0
;
;
;
