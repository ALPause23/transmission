;#include <inttypes.h>
;#include <avr/io.h>
;#include <avr-libs/spi/spi.h>
;
;#define __SPI_PORT PORTB
;#define __SPI_DDR DDRB
;const uint8_t __SPI_MOSI = 5;
;const uint8_t __SPI_MISO = 6;
;const uint8_t __SPI_SCK = 7;
;const uint8_t __SPI_LSBFIRST_MASK = 0b00000001;
;const uint8_t __SPI_MASTER_MASK = 0b00000001;
;const uint8_t __SPI_MODE_MASK = 0b00000011;
;const uint8_t __SPI_SPEED_MASK = 0b00000011;
;const uint8_t __SPI_DBLCLK_MASK = 0b00000001;
;
;//initialize the SPI bus
;//  uint8_t lsbfirst - if 0: most significant bit is transmitted first
;//  uint8_t master - if 1: use master mode, if 0: slave mode is used
;//  uint8_t mode - sets the transfer mode:
;//                 mode   leading clock edge   trailing clock edge
;//                 -----------------------------------------------
;//                 0      sample (rising)      setup  (falling)
;//                 1      setup  (rising)      sample (falling)
;//                 2      sample (falling)     setup  (rising)
;//                 3      setup  (falling)     sample (rising)
;//  uint8_t clkrate - spi bus clock rate, valid speeds are 0-3
;//                    rate   speed
;//                    ------------
;//                    0      CPUCLK/4
;//                    1      CPUCLK/16
;//                    2      CPUCLK/64
;//                    3      CPUCLK/128
;//  uint8_t dblclk - if 1: doubles the SPI clock rate in master mode
;//  EXAMPLE: spi_init(0, 1, 0, 3, 0)
;void spi_init(uint8_t lsbfirst,
; 0003 0024               uint8_t master,
; 0003 0025               uint8_t mode,
; 0003 0026               uint8_t clkrate,
; 0003 0027               uint8_t dblclk){

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0003 0028   //set outputs
; 0003 0029   __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;	lsbfirst -> R21
;	master -> R18
;	mode -> R19
;	clkrate -> R16
;	dblclk -> R17
;PCODE: $0000000C VOL: 0
; 0003 002A   //set inputs
; 0003 002B   __SPI_DDR &= ~(1<<__SPI_MISO);
;PCODE: $0000000D VOL: 0
; 0003 002C   __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
;PCODE: $0000000E VOL: 0
; 0003 002D   //set SPI control register
; 0003 002E   SPCR = (
; 0003 002F            (1<<SPE) | //enable SPI
; 0003 0030            ((lsbfirst & __SPI_LSBFIRST_MASK)<<DORD) | //set msb/lsb ordering
; 0003 0031            ((master & __SPI_MASTER_MASK)<<MSTR) | //set master/slave mode
; 0003 0032            ((mode & __SPI_MODE_MASK)<<CPHA) | //set mode
; 0003 0033            (clkrate & __SPI_SPEED_MASK<<SPR0) //set speed
; 0003 0034          );
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0003 0035   //set double speed bit
; 0003 0036   SPSR = ((dblclk&__SPI_DBLCLK_MASK)<<SPI2X);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0037 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;//shifts out 8 bits of data
;//  uint8_t data - the data to be shifted out
;//  returns uint8_t - the data received during sending
;uint8_t spi_send(uint8_t value){
; 0003 003C uint8_t spi_send(uint8_t value){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0003 003D   uint8_t result;
; 0003 003E 
; 0003 003F   //shift the first byte of the value
; 0003 0040   SPDR = value;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;	value -> R16
;	result -> R17
;PCODE: $00000039 VOL: 0
; 0003 0041   //wait for the SPI bus to finish
; 0003 0042   while(!(SPSR & (1<<SPIF)));
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0043   //get the received data
; 0003 0044   result = SPDR;
;PCODE: $00000041 VOL: 0
; 0003 0045 
; 0003 0046   return result;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0003 0047 }
;PCODE: $00000045 VOL: 0
