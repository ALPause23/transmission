;/*
; * transmission.c
; *
; * Created: 20.10.2022 22:41:13
; *  Author: Evgeni
; */
;
;#include <transmisions.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <MAX7219.h>

	.DSEG
;//#include <symbols.h>
;#include <setjmp.h>
;
;typedef enum
;{
;	R = 0,
;	ONE = 1,
;	TWO = 2,
;	THREE = 3,
;	FOUR = 4,
;	FIVE = 5,
;	N = -1,
;	none = -2
;
;}Transmission_State;
;
;//static uint8_t old_frame[8];
;
;//bool Get_State_Transmision(uint8_t num_trans)
;//{
;	//return GPIO_Read_Bits(PD, num_trans);
;//}
;
;//uint8_t r[8] = {
;	//0xF0,
;	//0x88,
;	//0x88,
;	//0xF0,
;	//0xA0,
;	//0x90,
;	//0x88,
;	//0x00
;//};
;
;Transmission_State Transmission_Get_EN(void)
; 0004 002D {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0004 002E 	int i = 0;
; 0004 002F 	for(i = 0; i <= 5; i++)
;PCODE: $0000000C VOL: 0
;	i -> R16,R17
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0004 0030 	{
; 0004 0031 		if((PINB & (1<<i)) == 0)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0004 0032 		{
; 0004 0033 			return i;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0004 0034 		}
; 0004 0035 	}
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0004 0036 	return N;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0004 0037 }
;PCODE: $0000002E VOL: 0
;
;void Animation_HorizRows(Matrix_Symbols symbol)
; 0004 003A {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0004 003B 	uint8_t new_frame[8];
; 0004 003C 	uint8_t symbol_source[8];
; 0004 003D 	uint8_t i;
; 0004 003E 
; 0004 003F 	memset(new_frame, 0, 8);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;	symbol -> R16
;	new_frame -> Y+10
;	symbol_source -> Y+2
;	i -> R17
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0004 0040 	memcpy(symbol_source, GetSymbols(symbol), 8);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0004 0041 
; 0004 0042 	for(i = 0; i < 7; i++)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0004 0043 	{
; 0004 0044 		memcpy(new_frame, symbol_source, i + 1);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0004 0045 		WriteSymbol(new_frame);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0004 0046 		delay_ms(80);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0004 0047 	}
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0004 0048 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;void Animation_ProgressBar(Matrix_Symbols symbol)
; 0004 004B {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0004 004C 	uint8_t symbol_source[8];
; 0004 004D 	uint8_t cycle, i;
; 0004 004E 
; 0004 004F 
; 0004 0050 	uint8_t data_send = 0;
; 0004 0051 	uint8_t addr_t = 0;
; 0004 0052 
; 0004 0053 	uint8_t route[12] = {0x06, 0x05, 0x04, 0x13, 0x23, 0x33, 0x44, 0x45, 0x46, 0x37, 0x27, 0x17};
; 0004 0054 
; 0004 0055 	memcpy(symbol_source, GetSymbols(symbol), 8);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;	symbol -> R21
;	symbol_source -> Y+18
;	cycle -> R17
;	i -> R16
;	data_send -> R19
;	addr_t -> R18
;	route -> Y+6
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0004 0056 
; 0004 0057 	for (cycle = 0; cycle < 10; cycle++ )
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0004 0058 	{
; 0004 0059 		for(i = 0; i < 12; i++)
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0004 005A 		{
; 0004 005B 			addr_t = (route[i] >> 4) + 1;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0004 005C 			data_send = 1 << (route[i] & 0x0F);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0004 005D 			SendLed(addr_t, data_send);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0004 005E 			delay_ms(50);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0004 005F 			SendLed(addr_t, 0x00);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0004 0060 		}
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0004 0061 	}
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0004 0062 
; 0004 0063 
; 0004 0064 
; 0004 0065 	WriteSymbol(symbol_source);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0004 0066 }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;
;void Animation_Cursor(Matrix_Symbols symbol)
; 0004 0069 {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0004 006A 	uint8_t new_frame[8];
; 0004 006B 	uint8_t symbol_source[8];
; 0004 006C 	uint8_t row, column, mask = 0x80;
; 0004 006D 	uint8_t used_mask = 0UL;
; 0004 006E 
; 0004 006F 
; 0004 0070 	memset(new_frame, 0, 8);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;	symbol -> R21
;	new_frame -> Y+14
;	symbol_source -> Y+6
;	row -> R17
;	column -> R16
;	mask -> R19
;	used_mask -> R18
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0004 0071 	memcpy(symbol_source, GetSymbols(symbol), 8);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0004 0072 
; 0004 0073 	for(row = 0; row < 7; row++)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0004 0074 	{
; 0004 0075 		for(column = 0; column < 5; column++)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0004 0076 		{
; 0004 0077 			memcpy(new_frame, symbol_source, row + 1);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0004 0078 
; 0004 0079 			if(column == 0)
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0004 007A 			{
; 0004 007B 				used_mask = mask;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0004 007C 			}
; 0004 007D 			else
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0004 007E 			{
; 0004 007F 				used_mask += (64 / (1 << column-1));
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0004 0080 			}
;PCODE: $000000EA VOL: 0
; 0004 0081 
; 0004 0082 			new_frame[row] &= used_mask;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0004 0083 			new_frame[row] |= (0x80 >> column);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0004 0084 			WriteSymbol(new_frame);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0004 0085 			delay_ms(30);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0004 0086 		}
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0004 0087 	}
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0004 0088 	WriteSymbol(symbol_source);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0004 0089 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;
;void Animation_SlideShow(Matrix_Symbols symbol)
; 0004 008C {
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0004 008D 	uint8_t symbol_source[8];
; 0004 008E 	int8_t row;
; 0004 008F 
; 0004 0090 	memcpy(symbol_source, GetSymbols(symbol), 8);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;	symbol -> R16
;	symbol_source -> Y+2
;	row -> R17
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0004 0091 
; 0004 0092 	for(row = 0; row <= 7; row++)
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0004 0093 	{
; 0004 0094 		SendLed((row + 1), 0x00);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0004 0095 		delay_ms(50);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0004 0096 	}
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0004 0097 
; 0004 0098 	for(row = 7; row >= 0; row--)
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0004 0099 	{
; 0004 009A 		SendLed(row + 1, symbol_source[row]);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0004 009B 		delay_ms(50);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0004 009C 	}
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0004 009D }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;
;//void Animation_ShiftDown(Matrix_Symbols symbol)
;//{
;//
;//}
;
;void Trans_Poll(void)
; 0004 00A5 {
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0004 00A6 	static Transmission_State matrix_status_new = none;

	.DSEG

	.CSEG
; 0004 00A7 	static Transmission_State matrix_status = none;

	.DSEG

	.CSEG
; 0004 00A8 	static uint8_t count_delay = 0;
; 0004 00A9 
; 0004 00AA 	matrix_status_new = Transmission_Get_EN();
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0004 00AB 
; 0004 00AC 	if(matrix_status != matrix_status_new)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0004 00AD 	{
; 0004 00AE 		count_delay++;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0004 00AF 	}
; 0004 00B0 
; 0004 00B1 	if(count_delay == 6)
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0004 00B2 	{
; 0004 00B3 		switch(matrix_status_new)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0004 00B4 		{
; 0004 00B5 			case R:
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0004 00B6 			{
; 0004 00B7 				//memcpy(old_frame, GetSymbols(SYMBOL_R), 8);
; 0004 00B8 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0004 00B9 				delay_ms(5);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0004 00BA 				Animation_HorizRows(SYMBOL_R);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0004 00BB 				//WriteNum(SYMBOL_R);
; 0004 00BC 				break;
;PCODE: $00000167 VOL: 0
; 0004 00BD 			}
; 0004 00BE 			case ONE:
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0004 00BF 			{
; 0004 00C0 				//memcpy(old_frame, GetSymbols(SYMBOL_ONE), 8);
; 0004 00C1 				WriteNum(SYMBOL_EMTY);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0004 00C2 				delay_ms(5);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0004 00C3 				Animation_ProgressBar(SYMBOL_ONE);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0004 00C4 				//WriteNum(SYMBOL_ONE);
; 0004 00C5 				break;
;PCODE: $00000172 VOL: 0
; 0004 00C6 			}
; 0004 00C7 			case TWO:
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0004 00C8 			{
; 0004 00C9 				//memcpy(old_frame, GetSymbols(SYMBOL_TWO), 8);
; 0004 00CA 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0004 00CB 				delay_ms(5);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0004 00CC 				WriteNum(SYMBOL_TWO);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0004 00CD 				break;
;PCODE: $0000017D VOL: 0
; 0004 00CE 			}
; 0004 00CF 			case THREE:
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0004 00D0 			{
; 0004 00D1 				//memcpy(old_frame, GetSymbols(SYMBOL_THREE), 8);
; 0004 00D2 				//WriteNum(SYMBOL_EMTY);
; 0004 00D3 				delay_ms(5);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0004 00D4 				Animation_SlideShow(SYMBOL_THREE);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0004 00D5 				//WriteNum(SYMBOL_THREE);
; 0004 00D6 				break;
;PCODE: $00000186 VOL: 0
; 0004 00D7 			}
; 0004 00D8 			case FOUR:
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0004 00D9 			{
; 0004 00DA 				//memcpy(old_frame, GetSymbols(SYMBOL_FOUR), 8);
; 0004 00DB 				WriteNum(SYMBOL_EMTY);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0004 00DC 				delay_ms(5);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0004 00DD 				WriteNum(SYMBOL_FOUR);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0004 00DE 				break;
;PCODE: $00000191 VOL: 0
; 0004 00DF 			}
; 0004 00E0 			case FIVE:
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0004 00E1 			{
; 0004 00E2 				//memcpy(old_frame, GetSymbols(SYMBOL_FIVE), 8);
; 0004 00E3 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0004 00E4 				delay_ms(5);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0004 00E5 				Animation_Cursor(SYMBOL_FIVE);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0004 00E6 				//WriteNum(SYMBOL_FIVE);
; 0004 00E7 				break;
;PCODE: $0000019C VOL: 0
; 0004 00E8 			}
; 0004 00E9 			default:
;PCODE: $0000019D VOL: 0
; 0004 00EA 			{
; 0004 00EB 				//memcpy(old_frame, GetSymbols(SYMBOL_N), 8);
; 0004 00EC 				WriteNum(SYMBOL_EMTY);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0004 00ED 				delay_ms(5);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0004 00EE 				WriteNum(SYMBOL_N);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0004 00EF 				break;
;PCODE: $000001A5 VOL: 0
; 0004 00F0 			}
; 0004 00F1 		}
;PCODE: $000001A6 VOL: 0
; 0004 00F2 		count_delay = 0;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0004 00F3 		matrix_status = matrix_status_new;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0004 00F4 	}
; 0004 00F5 }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;
