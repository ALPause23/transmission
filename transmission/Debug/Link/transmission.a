;/*
; * transmission.c
; *
; * Created: 20.10.2022 22:41:13
; *  Author: Evgeni
; */
;
;#include <transmisions.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <MAX7219.h>

	.DSEG
;//#include <symbols.h>
;
;typedef enum
;{
;	R = 0,
;	ONE = 1,
;	TWO = 2,
;	THREE = 3,
;	FOUR = 4,
;	FIVE = 5,
;	N = -1,
;	none = -2
;
;}Transmission_State;
;
;//bool Get_State_Transmision(uint8_t num_trans)
;//{
;	//return GPIO_Read_Bits(PD, num_trans);
;//}
;
;//uint8_t r[8] = {
;	//0xF0,
;	//0x88,
;	//0x88,
;	//0xF0,
;	//0xA0,
;	//0x90,
;	//0x88,
;	//0x00
;//};
;
;Transmission_State Transmission_Get_EN(void)
; 0004 002A {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0004 002B 	int i = 0;
; 0004 002C 	for(i = 0; i <= 5; i++)
;PCODE: $0000000C VOL: 0
;	i -> R16,R17
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0004 002D 	{
; 0004 002E 		if((PINB & (1<<i)) == 0)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0004 002F 		{
; 0004 0030 			return i;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0004 0031 		}
; 0004 0032 	}
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0004 0033 	return N;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0004 0034 }
;PCODE: $0000002E VOL: 0
;
;//void Animation(Matrix_Symbols symbol)
;//{
;	//uint8_t new_frame[8];
;	//uint8_t symbol_source[8];
;	//uint8_t i;
;	//
;	//memset(new_frame, 0, 8);
;	//memcpy(symbol_source, GetSymbols(symbol), 8);
;	//
;	//for(i = 0; i < 7; i++)
;	//{
;		//memcpy(&new_frame[i], &symbol_source[i], 1);
;		//WriteSymbol(new_frame);
;		//delay_ms(800);
;	//}
;//}
;
;void Trans_Poll(void)
; 0004 0048 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0004 0049 	static Transmission_State matrix_status_new = none;

	.DSEG

	.CSEG
; 0004 004A 	static Transmission_State matrix_status = none;

	.DSEG

	.CSEG
; 0004 004B 	static uint8_t count_delay = 0;
; 0004 004C 
; 0004 004D 	matrix_status_new = Transmission_Get_EN();
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0004 004E 
; 0004 004F 	if(matrix_status != matrix_status_new)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0004 0050 	{
; 0004 0051 		count_delay++;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0004 0052 	}
; 0004 0053 
; 0004 0054 	if(count_delay == 6)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0004 0055 	{
; 0004 0056 		switch(matrix_status_new)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0004 0057 		{
; 0004 0058 			case R:
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0004 0059 			{
; 0004 005A 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0004 005B 				delay_ms(5);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0004 005C 				//Animation(SYMBOL_R);
; 0004 005D 				WriteNum(SYMBOL_R);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0004 005E 				break;
;PCODE: $00000049 VOL: 0
; 0004 005F 			}
; 0004 0060 			case ONE:
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0004 0061 			{
; 0004 0062 				WriteNum(SYMBOL_EMTY);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0004 0063 				delay_ms(5);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0004 0064 				WriteNum(SYMBOL_ONE);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0004 0065 				break;
;PCODE: $00000054 VOL: 0
; 0004 0066 			}
; 0004 0067 			case TWO:
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0004 0068 			{
; 0004 0069 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0004 006A 				delay_ms(5);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0004 006B 				WriteNum(SYMBOL_TWO);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0004 006C 				break;
;PCODE: $0000005F VOL: 0
; 0004 006D 			}
; 0004 006E 			case THREE:
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0004 006F 			{
; 0004 0070 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0004 0071 				delay_ms(5);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0004 0072 				WriteNum(SYMBOL_THREE);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0004 0073 				break;
;PCODE: $0000006A VOL: 0
; 0004 0074 			}
; 0004 0075 			case FOUR:
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0004 0076 			{
; 0004 0077 				WriteNum(SYMBOL_EMTY);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0004 0078 				delay_ms(5);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0004 0079 				WriteNum(SYMBOL_FOUR);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0004 007A 				break;
;PCODE: $00000075 VOL: 0
; 0004 007B 			}
; 0004 007C 			case FIVE:
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0004 007D 			{
; 0004 007E 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0004 007F 				delay_ms(5);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0004 0080 				WriteNum(SYMBOL_FIVE);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0004 0081 				break;
;PCODE: $00000080 VOL: 0
; 0004 0082 			}
; 0004 0083 			default:
;PCODE: $00000081 VOL: 0
; 0004 0084 			{
; 0004 0085 				WriteNum(SYMBOL_EMTY);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0004 0086 				delay_ms(5);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0004 0087 				WriteNum(SYMBOL_N);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0004 0088 				break;
;PCODE: $00000089 VOL: 0
; 0004 0089 			}
; 0004 008A 		}
;PCODE: $0000008A VOL: 0
; 0004 008B 		count_delay = 0;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0004 008C 		matrix_status = matrix_status_new;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0004 008D 	}
; 0004 008E }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;
